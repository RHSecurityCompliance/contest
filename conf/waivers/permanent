# these tests are always expected to fail, because there's no reasonable way
# to fix them, or because we intentionally expect the failure and a pass should
# trigger alarms and be invetigated

# remediation for this is globally disabled in Contest by unselecting
# the rules from the datastream used for remediation, the rules are still
# selected in the datastream used for scanning so we need to waive them,
# see conf/remediation.py
/hardening/.+/accounts_password_set_max_life_(existing|root)
/hardening/.+/sshd_disable_root_login
/hardening/.+/sshd_disable_root_password_login
    True

# the service_sssd_enabled will be failing even if the service is enabled
# because it requires manual configuration which cannot be attained with our rules
# note that there are cases when sssd can be started
/hardening/.+/service_sssd_enabled
    True

# ignore SSL certificate expirations in html-links - these are generally
# harmless (expiration is not MITM) while being the biggest contributor
# to false positives, so just ignore them, avoiding frequent random fails
/static-checks/html-links/.+
    "failed: certificate has expired" in note
# Inaccessible until form is filled:
/static-checks/html-links/https://docs-prv.pcisecuritystandards.org/PCI%20DSS/Standard/PCI-DSS-v4_0.pdf
    True

# no STIG ID, but the rule is needed for other authselect rules
/static-checks/rule-identifiers/stig/enable_authselect
    rhel == 8
# no STIG ID for CentOS products
/static-checks/rule-identifiers/stig/.*
    rhel.is_centos() and note == 'missing https://public.cyber.mil/stigs/downloads/?_dl_facet_stigs=operating-systems%2Cunix-linux'

# DISA benchmark allows only released OS versions. Our content is fine with unreleased versions.
# https://github.com/ComplianceAsCode/content/issues/11649
/scanning/disa-alignment/.*/installed_OS_is_vendor_supported
    True
# This sysctl setting breaks some services and according to STIG it can be skipped if there is a need
# https://github.com/ComplianceAsCode/content/pull/12824
/scanning/disa-alignment/.*/sysctl_user_max_user_namespaces
    rhel >= 9

# Rules checking if OS is FIPS certified
/hardening/host-os/.+/sshd_use_approved_.+
/hardening/host-os/.+/package_dracut-fips_installed
/hardening/host-os/.+/grub2_enable_fips_mode
/hardening/host-os/.+/aide_use_fips_hashes
    rhel.is_centos()
# Presumably not valid for CentOS, see also conf/remediation.py
/hardening/.+/ospp/enable_fips_mode
/hardening/.*/ospp/configure_crypto_policy
    rhel.is_centos() and (rhel == 9 or rhel == 10)

# Caused by SCE content being built by default, enabled
# in https://github.com/ComplianceAsCode/content/pull/12488
/static-checks/nist-validation/ssg-(rhel\d+|cs\d+)-ds/SRC-118
    True

# The rules related to SSH keys fail because SSH host keys don't exist
# at container build time, they are generated by the sshd-keygen service only
# once the system is deployed by executing /usr/libexec/openssh/sshd-keygen
# script. We inform users in rules by warning text saying that remediation
# is not possible at bootable container build time because SSH host keys are
# generated post-deployment. The warning has been introduced by
# https://github.com/ComplianceAsCode/content/pull/12755.
/hardening/container/.+/file_groupownership_sshd_private_key
/hardening/container/.+/file_permissions_sshd_private_key
# There is no mounted /tmp directory when hardening the system during osbuild image creation.
# Therefore, the rule cannot be remediated.
/hardening/image-builder(/.+)?/anssi_[^/]+/mount_option_tmp_noexec
    True

# these tests modify /etc/bashrc to set PATH, but our current /per-rule test
# implementation doesn't re-execute the shell runner before executing 'oscap'
# (doing so would incur a performance penalty for all tests), so the 'oscap'
# inherits an outdated PATH, making the scan fail
/per-rule/oscap/.+/root_path_no_dot/absolute_path.fail
/per-rule/oscap/.+/root_path_no_dot/colon_on_path.fail
/per-rule/oscap/.+/root_path_no_dot/doublecolon_on_path.fail
/per-rule/oscap/.+/root_path_no_dot/doubleperiod_on_path.fail
/per-rule/oscap/.+/root_path_no_dot/period_on_path.fail
    True

# waive rules that have no respective remediation based on their test name
/hardening/oscap/.+
/hardening/host-os/oscap/.+
    Match(no_remediation(fix.bash), note="no bash remediation")
/hardening/ansible/.+
/hardening/host-os/ansible/.+
    Match(no_remediation(fix.ansible), note="no ansible remediation")
/hardening/anaconda/.+
    Match(no_remediation(fix.bash | fix.anaconda), note="no bash nor anaconda remediation")
/hardening/kickstart/.+
    Match(no_remediation(fix.bash | fix.kickstart), note="no bash nor kickstart remediation")
/hardening/image-builder/.+
    Match(no_remediation(fix.bash | fix.blueprint), note="no bash nor blueprint remediation")
/hardening/container/.+
    Match(no_remediation(fix.bash | fix.bootc), note="no bash nor bootc remediation")

# vim: syntax=python
