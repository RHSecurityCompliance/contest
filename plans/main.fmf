# do not inherit test-specific metadata from toplevel
/:
    inherit: false

execute:
    how: tmt

adjust:
  - prepare+:
      - how: install
        name: Install dependencies for further prepare steps
        package:
          # for git-fetch downloading of CONTEST_CONTENT_*
          - git-core
          # for building CONTEST_CONTENT
          - python-srpm-macros

  - prepare+:
      - how: shell
        name: Download and build latest or pull request content
        script: |
            set -xe
            if [ -n "$CONTEST_CONTENT_BRANCH" ]; then
                ref="refs/heads/$CONTEST_CONTENT_BRANCH"
            elif [ -n "$CONTEST_CONTENT_PR" ]; then
                ref="refs/pull/$CONTEST_CONTENT_PR/head"
            else
                exit 0
            fi
            content_dir=/root/upstream-content
            [ -e "$content_dir" ] || git init "$content_dir"
            cd "$content_dir"
            old_fetch_head=$(git rev-parse FETCH_HEAD 2>/dev/null) || true
            git fetch --depth=1 https://github.com/ComplianceAsCode/content.git "$ref"
            new_fetch_head=$(git rev-parse FETCH_HEAD)
            if [ "$old_fetch_head" != "$new_fetch_head" ]; then
                # remove any previously built content
                git clean -ffdx
                git checkout FETCH_HEAD
            fi
            echo "CONTEST_CONTENT=$content_dir" >> "$TMT_PLAN_ENVIRONMENT_FILE"

  - prepare+:
      - how: shell
        name: Update OpenSCAP from Packit (if specified)
        script: |
            set -xe
            # both result in the same URL on fedoraproject.org
            if [ -n "$CONTEST_OSCAP_BRANCH" ]; then
                ref="$CONTEST_OSCAP_BRANCH"
            elif [ -n "$CONTEST_OSCAP_PR" ]; then
                ref="$CONTEST_OSCAP_PR"
            else
                exit 0
            fi
            repofile=/etc/yum.repos.d/openscap-upstream-packit.repo
            echo "CONTEST_OSCAP_REPOFILE=$repofile" >> "$TMT_PLAN_ENVIRONMENT_FILE"
            rm -f "$repofile"
            if rpm -q openscap-scanner; then
                # the RPM might have been upgraded from another PR, sanitize it
                dnf -q -y downgrade openscap-scanner
            else
                # this runs before test dependencies are installed
                dnf -q -y install openscap-scanner
            fi
            # download a Packit-provided repository
            major=$(. /etc/os-release && echo "${VERSION_ID%%.*}")
            repourl="https://copr.fedorainfracloud.org/coprs/packit/OpenSCAP-openscap-$ref/repo/centos-stream-$major/packit-OpenSCAP-openscap-$ref-centos-stream-$major.repo"
            curl --retry 10 -sSfkL -o "$repofile" "$repourl"
            trap "rm -f \"$repofile\"" ERR
            # check that the per-PR repo contains a newer build
            rc=0
            dnf -q check-upgrade openscap-scanner || rc=$?
            if [ "$rc" -ne 100 ]; then  # see dnf(8)
                nvr=$(rpm -q openscap-scanner)
                echo "openscap-scanner from $ref doesn't upgrade existing $nvr" >&2
                false  # exit with ERR
            fi
            dnf -q -y upgrade openscap-scanner
            # invalidate VM snapshots
            rm -f /var/lib/libvirt/images/*.ready
  - finish+:
      - how: shell
        name: Restore original OpenSCAP (if upgraded from Packit)
        script: |
            set -xe
            repofile=/etc/yum.repos.d/openscap-upstream-packit.repo
            if [ -f "$repofile" ]; then
                dnf -q -y downgrade openscap-scanner
                rm -f "$repofile"
            fi

    # The problem with current Testing Farm composes (both ranches) is that they
    # are optimized for errata testing, with a special "tag" repository inserted
    # above nightly composes and many system packages upgraded from it.
    # Testing Farm then disables this repo, breaking "dnf install" for some test
    # dependencies. The code below tries to work around that.
  - prepare+:
      - how: shell
        name: Restore original compose versions of installed packages
        script: |
            set -xe
            # clean up packages from extra repos, restoring original vanilla OS (sorta)
            rm -v -f \
                /etc/yum.repos.d/{tag-repository,*beakerlib*,rcmtools}.repo \
                /etc/yum.repos.d/beaker-{client,harness,tasks}.repo
            # downgrade any packages installed/upgraded from the extra package repos
            function list_foreign_rpms {
                dnf list --installed \
                | grep -e @koji-override -e @testing-farm -e @rcmtools -e @@commandline \
                | sed 's/ .*//'
            }
            rpms=$(list_foreign_rpms)
            [[ $rpms ]] && dnf downgrade -y --skip-broken $rpms
            rpms=$(list_foreign_rpms)
            [[ $rpms ]] && dnf remove -y --noautoremove $rpms
            dnf clean all
        when: trigger == build or newa_batch is defined

# vim: syntax=yaml
